generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_ban {
  user_id     Int      @id(map: "ban_pkey")
  title       String?
  reason      String?
  date        String?
  pass_origin String?
  pass_block  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model account_history {
  report_id  Int       @id @default(autoincrement())
  user_id    Int?
  title      String?
  reason     String?
  date       DateTime? @db.Date
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
}

model account_moderation {
  id         Int      @id @default(autoincrement())
  username   String?
  password   String?
  type       String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model account_sub {
  id               Int       @id(map: "account_auth_pkey") @default(autoincrement())
  discord_id       String?
  erupe_account    String?
  erupe_password   String?
  date_inscription DateTime? @db.Date
  country          String?
  presentation     String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
}

model characters {
  id                                                             Int                  @id @default(autoincrement())
  user_id                                                        Int?
  is_female                                                      Boolean?
  is_new_character                                               Boolean?
  name                                                           String?              @db.VarChar(15)
  unk_desc_string                                                String?              @db.VarChar(31)
  gr                                                             Int?
  hrp                                                            Int?
  weapon_type                                                    Int?
  last_login                                                     Int?
  savedata                                                       Bytes?
  decomyset                                                      Bytes?
  hunternavi                                                     Bytes?
  otomoairou                                                     Bytes?
  partner                                                        Bytes?
  platebox                                                       Bytes?
  platedata                                                      Bytes?
  platemyset                                                     Bytes?
  rengokudata                                                    Bytes?
  savemercenary                                                  Bytes?
  restrict_guild_scout                                           Boolean              @default(false)
  minidata                                                       Bytes?
  gacha_trial                                                    Int?
  gacha_prem                                                     Int?
  gacha_items                                                    Bytes?
  daily_time                                                     DateTime?            @db.Timestamp(6)
  frontier_points                                                Int?
  house_info                                                     Bytes?
  login_boost                                                    Bytes?
  skin_hist                                                      Bytes?
  kouryou_point                                                  Int?
  gcp                                                            Int?
  guild_post_checked                                             DateTime             @default(now()) @db.Timestamp(6)
  time_played                                                    Int                  @default(0)
  weapon_id                                                      Int                  @default(0)
  scenariodata                                                   Bytes?
  house                                                          Bytes?
  savefavoritequest                                              Bytes?
  friends                                                        String               @default("")
  blocked                                                        String               @default("")
  deleted                                                        Boolean              @default(false)
  cafe_time                                                      Int?                 @default(0)
  netcafe_points                                                 Int?                 @default(0)
  boost_time                                                     DateTime?            @db.Timestamp(6)
  trophy                                                         Bytes?
  created_at                                                     DateTime             @default(now())
  updated_at                                                     DateTime             @default(now()) @updatedAt
  users                                                          users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guild_applications_charactersToguild_applications_actor_id     guild_applications[] @relation("charactersToguild_applications_actor_id")
  guild_applications_charactersToguild_applications_character_id guild_applications[] @relation("charactersToguild_applications_character_id")
  guild_characters                                               guild_characters?
  login_boost_state                                              login_boost_state[]
  lucky_box_state                                                lucky_box_state[]
  mail_charactersTomail_recipient_id                             mail[]               @relation("charactersTomail_recipient_id")
  shop_item_state                                                shop_item_state[]
  stepup_state                                                   stepup_state[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model fpoint_items {
  hash       Int?
  itemtype   Int?     @db.SmallInt
  itemid     Int?
  quant      Int?
  itemvalue  Int?
  tradetype  Int?     @db.SmallInt
  created_at DateTime @default(now())
  id         Int      @id @default(autoincrement())
  updated_at DateTime @default(now()) @updatedAt
}

model gacha_shop {
  hash       Int
  reqgr      Int
  reqhr      Int
  gachaname  String   @db.VarChar(255)
  gachalink0 String   @db.VarChar(255)
  gachalink1 String   @db.VarChar(255)
  gachalink2 String   @db.VarChar(255)
  extraicon  Int
  gachatype  Int
  hideflag   Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([hash, reqgr, reqhr, gachaname, gachalink0, gachalink1, gachalink2, extraicon, gachatype, hideflag])
}

model gacha_shop_items {
  shophash   Int?
  entrytype  Int?     @db.SmallInt
  itemhash   Int      @unique
  currtype   Int?     @db.SmallInt
  currnumber Int?
  currquant  Int?
  percentage Int?
  rarityicon Int?     @db.SmallInt
  rollscount Int?     @db.SmallInt
  itemcount  Int?     @db.SmallInt
  dailylimit Int?     @db.SmallInt
  itemtype   Int[]
  itemid     Int[]
  quantity   Int[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model gook {
  id    Int    @id @default(autoincrement())
  gook0 Bytes?
  gook1 Bytes?
  gook2 Bytes?
  gook3 Bytes?
  gook4 Bytes?
}

model guild_applications {
  id                                                     Int                    @id @default(autoincrement())
  guild_id                                               Int
  character_id                                           Int
  actor_id                                               Int
  application_type                                       guild_application_type
  created_at                                             DateTime               @default(now())
  updated_at                                             DateTime               @default(now()) @updatedAt
  characters_charactersToguild_applications_actor_id     characters             @relation("charactersToguild_applications_actor_id", fields: [actor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  characters_charactersToguild_applications_character_id characters             @relation("charactersToguild_applications_character_id", fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guilds                                                 guilds                 @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([guild_id, character_id], map: "guild_application_character_id")
  @@index([application_type], map: "guild_application_type_index")
}

model guild_characters {
  id               Int         @id @default(autoincrement())
  guild_id         Int?
  character_id     Int?        @unique(map: "guild_character_unique_index")
  joined_at        DateTime?   @default(now()) @db.Timestamp(6)
  avoid_leadership Boolean     @default(false)
  order_index      Int         @default(1)
  recruiter        Boolean     @default(false)
  souls            Int?        @default(0)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @default(now()) @updatedAt
  characters       characters? @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guilds           guilds?     @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model guild_posts {
  id         Int      @id @default(autoincrement())
  guild_id   Int
  author_id  Int
  post_type  Int
  stamp_id   Int
  title      String
  body       String
  created_at DateTime @default(now())
  liked_by   String   @default("")
  updated_at DateTime @default(now()) @updatedAt
}

model guilds {
  id                 Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(24)
  created_at         DateTime             @default(now())
  leader_id          Int
  main_motto         Int?                 @default(0)
  rank_rp            Int                  @default(0)
  comment            String               @default("") @db.VarChar(255)
  icon               Bytes?
  sub_motto          Int?                 @default(0)
  item_box           Bytes?
  event_rp           Int                  @default(0)
  pugi_name_1        String?              @default("") @db.VarChar(12)
  pugi_name_2        String?              @default("") @db.VarChar(12)
  pugi_name_3        String?              @default("") @db.VarChar(12)
  recruiting         Boolean              @default(true)
  updated_at         DateTime             @default(now()) @updatedAt
  guild_applications guild_applications[]
  guild_characters   guild_characters[]
}

model history {
  user_id    Int?
  admin_id   Int?
  report_id  Int      @id
  title      String?
  reason     String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model login_boost_state {
  char_id    Int?
  week_req   Int?        @db.SmallInt
  week_count Int?        @db.SmallInt
  available  Boolean?
  end_time   Int?
  last_week  Int?
  created_at DateTime    @default(now())
  id         Int         @id @default(autoincrement())
  updated_at DateTime    @default(now()) @updatedAt
  characters characters? @relation(fields: [char_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([char_id, week_req], map: "id_week")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model lucky_box_state {
  char_id       Int?
  shophash      Int
  used_itemhash Int[]
  created_at    DateTime    @default(now())
  id            Int         @id @default(autoincrement())
  updated_at    DateTime    @updatedAt
  characters    characters? @relation(fields: [char_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([char_id, shophash], map: "lucky_box_state_id_shophash")
}

model mail {
  id                                       Int        @id @default(autoincrement())
  sender_id                                Int
  recipient_id                             Int
  subject                                  String     @default("") @db.VarChar
  body                                     String     @default("") @db.VarChar
  read                                     Boolean    @default(false)
  attached_item_received                   Boolean    @default(false)
  attached_item                            Int?
  attached_item_amount                     Int        @default(1)
  is_guild_invite                          Boolean    @default(false)
  created_at                               DateTime   @default(now()) @db.Timestamp(6)
  deleted                                  Boolean    @default(false)
  locked                                   Boolean    @default(false)
  is_sys_message                           Boolean?   @default(false)
  updated_at                               DateTime   @default(now()) @updatedAt
  characters_charactersTomail_recipient_id characters @relation("charactersTomail_recipient_id", fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([recipient_id, deleted, created_at(sort: Desc), id(sort: Desc)], map: "mail_recipient_deleted_created_id_index")
}

model normal_shop_items {
  shoptype           Int?
  shopid             Int?
  itemhash           Int      @id
  itemid             Int?
  points             Int?
  tradequantity      Int?
  rankreqlow         Int?
  rankreqhigh        Int?
  rankreqg           Int?
  storelevelreq      Int?
  maximumquantity    Int?
  boughtquantity     Int?
  roadfloorsrequired Int?
  weeklyfataliskills Int?
  enable_weeks       String?  @db.VarChar(8)
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt
}

model questlists {
  ind        Int      @id
  questlist  Bytes?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model raviregister {
  id           Int      @id @default(autoincrement())
  refid        Int
  nextravi     Int
  ravistarted  Int?
  raviposttime Int?
  ravitype     Int?
  maxplayers   Int?
  ravikilled   Int?
  carvequest   Int?
  register1    Int?
  register2    Int?
  register3    Int?
  register4    Int?
  register5    Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
}

model ravistate {
  id               Int      @id @default(autoincrement())
  refid            Int
  phase1hp         Int
  phase2hp         Int?
  phase3hp         Int?
  phase4hp         Int?
  phase5hp         Int?
  phase6hp         Int?
  phase7hp         Int?
  phase8hp         Int?
  phase9hp         Int?
  unknown1         Int?
  unknown2         Int?
  unknown3         Int?
  unknown4         Int?
  unknown5         Int?
  unknown6         Int?
  unknown7         Int?
  unknown8         Int?
  unknown9         Int?
  unknown10        Int?
  unknown11        Int?
  unknown12        Int?
  unknown13        Int?
  unknown14        Int?
  unknown15        Int?
  unknown16        Int?
  unknown17        Int?
  unknown18        Int?
  unknown19        Int?
  unknown20        Int?
  damagemultiplier Int?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model ravisupport {
  id         Int      @id @default(autoincrement())
  refid      Int
  support1   Int
  support2   Int?
  support3   Int?
  support4   Int?
  support5   Int?
  support6   Int?
  support7   Int?
  support8   Int?
  support9   Int?
  support10  Int?
  support11  Int?
  support12  Int?
  support13  Int?
  support14  Int?
  support15  Int?
  support16  Int?
  support17  Int?
  support18  Int?
  support19  Int?
  support20  Int?
  support21  Int?
  support22  Int?
  support23  Int?
  support24  Int?
  support25  Int?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model servers {
  server_id         Int
  season            Int
  current_players   Int
  land              Int?
  world_name        String?
  world_description String?
  created_at        DateTime @default(now())
  id                Int      @id @default(autoincrement())
  updated_at        DateTime @default(now()) @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model shop_item_state {
  char_id      Int?
  itemhash     Int
  usedquantity Int?
  week         Int?
  created_at   DateTime    @default(now())
  id           Int         @id @default(autoincrement())
  updated_at   DateTime    @default(now()) @updatedAt
  characters   characters? @relation(fields: [char_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([char_id, itemhash], map: "shop_item_state_id_itemhash")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model sign_sessions {
  user_id    Int
  char_id    Int?
  token      String   @db.VarChar(16)
  server_id  Int?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model stepup_state {
  char_id          Int?
  shophash         Int
  step_progression Int?
  step_time        DateTime?   @db.Timestamp(6)
  created_at       DateTime    @default(now())
  id               Int         @id @default(autoincrement())
  updated_at       DateTime    @default(now()) @updatedAt
  characters       characters? @relation(fields: [char_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([char_id, shophash], map: "stepup_state_id_shophash")
}

model users {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  password         String
  rights           Int                @default(846)
  item_box         Bytes?
  last_character   Int?               @default(0)
  last_login       DateTime?          @db.Timestamp(6)
  return_expires   DateTime?          @db.Timestamp(6)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  characters       characters[]
  user_connections user_connections[]
}

model distribution {
  id               Int       @id @default(autoincrement())
  character_id     Int?
  type             Int
  deadline         DateTime? @db.Timestamp(6)
  event_name       String    @default("GM Gift!")
  description      String    @default("~C05You received a gift!")
  times_acceptable Int       @default(1)
  min_hr           Int       @default(65535)
  max_hr           Int       @default(65535)
  min_sr           Int       @default(65535)
  max_sr           Int       @default(65535)
  min_gr           Int       @default(65535)
  max_gr           Int       @default(65535)
  data             Bytes
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model distributions_accepted {
  distribution_id Int?
  character_id    Int?
  created_at      DateTime @default(now())
  id              Int      @id @default(autoincrement())
  updated_at      DateTime @default(now()) @updatedAt
}

model user_connections {
  id          Int                 @id @default(autoincrement())
  user_id     Int
  provider    ConnectionProviders
  provider_id String
  created_at  DateTime            @default(now()) @db.Timestamp(6)
  updated_at  DateTime            @default(now()) @db.Timestamp(6)
  user        users               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider], map: "user_connections_id_provider")
  @@unique([provider_id, provider], map: "user_connections_provider_id_provider")
}

model guild_adventures {
  id           Int      @id @default(autoincrement())
  guild_id     Int
  destination  Int
  charge       Int      @default(0)
  depart       Int
  return       Int
  collected_by String   @default("")
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
}

model guild_alliances {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(24)
  created_at DateTime @default(now()) @db.Timestamp(6)
  parent_id  Int
  sub1_id    Int?
  sub2_id    Int?
  updated_at DateTime @default(now()) @updatedAt
}

model guild_hunts {
  id          Int      @id @default(autoincrement())
  guild_id    Int
  host_id     Int
  destination Int
  level       Int
  return      Int
  acquired    Boolean  @default(false)
  claimed     Boolean  @default(false)
  hunters     String   @default("")
  treasure    String   @default("")
  hunt_data   Bytes
  cats_used   String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model guild_meals {
  id         Int      @id @default(autoincrement())
  guild_id   Int
  meal_id    Int
  level      Int
  expires    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model user_binaries {
  id         Int      @id
  type2      Bytes?
  type3      Bytes?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model achievements {
  id    Int  @id
  ach0  Int? @default(0)
  ach1  Int? @default(0)
  ach2  Int? @default(0)
  ach3  Int? @default(0)
  ach4  Int? @default(0)
  ach5  Int? @default(0)
  ach6  Int? @default(0)
  ach7  Int? @default(0)
  ach8  Int? @default(0)
  ach9  Int? @default(0)
  ach10 Int? @default(0)
  ach11 Int? @default(0)
  ach12 Int? @default(0)
  ach13 Int? @default(0)
  ach14 Int? @default(0)
  ach15 Int? @default(0)
  ach16 Int? @default(0)
  ach17 Int? @default(0)
  ach18 Int? @default(0)
  ach19 Int? @default(0)
  ach20 Int? @default(0)
  ach21 Int? @default(0)
  ach22 Int? @default(0)
  ach23 Int? @default(0)
  ach24 Int? @default(0)
  ach25 Int? @default(0)
  ach26 Int? @default(0)
  ach27 Int? @default(0)
  ach28 Int? @default(0)
  ach29 Int? @default(0)
  ach30 Int? @default(0)
  ach31 Int? @default(0)
  ach32 Int? @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cafe_accepted {
  cafe_id      Int
  character_id Int

  @@ignore
}

model cafebonus {
  id        Int @id @default(autoincrement())
  time_req  Int
  item_type Int
  item_id   Int
  quantity  Int
}

model events {
  id         Int        @id @default(autoincrement())
  event_type event_type
  start_time DateTime   @default(now()) @db.Timestamp(6)
}

model festa_prizes {
  id        Int        @id @default(autoincrement())
  type      prize_type
  tier      Int
  souls_req Int
  item_id   Int
  num_item  Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model festa_prizes_accepted {
  prize_id     Int
  character_id Int

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model festa_registrations {
  guild_id Int
  team     festival_colour

  @@ignore
}

model festa_trials {
  id         Int @id @default(autoincrement())
  objective  Int
  goal_id    Int
  times_req  Int
  locale_req Int @default(0)
  reward     Int
}

model rengoku_score {
  character_id  Int  @id
  max_stages_mp Int?
  max_points_mp Int?
  max_stages_sp Int?
  max_points_sp Int?
}

model schema_migrations {
  version Int     @id
  dirty   Boolean
}

model stamps {
  character_id Int       @id
  hl_total     Int?      @default(0)
  hl_redeemed  Int?      @default(0)
  hl_next      DateTime? @db.Timestamp(6)
  ex_total     Int?      @default(0)
  ex_redeemed  Int?      @default(0)
  ex_next      DateTime? @db.Timestamp(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model titles {
  id          Int
  char_id     Int
  unlocked_at DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)

  @@ignore
}

model warehouse {
  character_id Int     @id
  item0        Bytes?
  item1        Bytes?
  item2        Bytes?
  item3        Bytes?
  item4        Bytes?
  item5        Bytes?
  item6        Bytes?
  item7        Bytes?
  item8        Bytes?
  item9        Bytes?
  item10       Bytes?
  item0name    String?
  item1name    String?
  item2name    String?
  item3name    String?
  item4name    String?
  item5name    String?
  item6name    String?
  item7name    String?
  item8name    String?
  item9name    String?
  equip0       Bytes?
  equip1       Bytes?
  equip2       Bytes?
  equip3       Bytes?
  equip4       Bytes?
  equip5       Bytes?
  equip6       Bytes?
  equip7       Bytes?
  equip8       Bytes?
  equip9       Bytes?
  equip10      Bytes?
  equip0name   String?
  equip1name   String?
  equip2name   String?
  equip3name   String?
  equip4name   String?
  equip5name   String?
  equip6name   String?
  equip7name   String?
  equip8name   String?
  equip9name   String?
}

enum festival_colour {
  none
  red
  blue
}

enum guild_application_type {
  applied
  invited
}

enum ConnectionProviders {
  DISCORD
}

enum event_type {
  festa
  diva
  vs
  mezfes
}

enum prize_type {
  personal
  guild
}
